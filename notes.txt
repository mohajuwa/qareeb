Analyze the project in your base knowledge and do the following :

first thing write a prompt about the following

1 - I need you to Replace Fluttertoast with something modern that will display the app icon with the notification
   with error things or info or success etc..

2 - see the logic of when request a ride with using this ("Automatically book the nearest driver for (${globalcurrency}${amountcontroller.text})")
 and when not using it , couse when I turn on the switch the request sends of and the driver response with accept and everything is fine
 but , when I am not using it , the requist send ok and the driver response with custom price the response till now is fine in customer app
 thin saddinley I do not get the same as it should when I try to accept or reject his response , see and you will understand..

 3 - when I start or get back or refresh the  MapScreen (main screen in app) the app loading like leazy , I mean see
   and keep in mind that I need it to work with the same logic , if you can re structure the code to make it run faster as posibble
   thin go ahead .


4 - see where we need to use SingleChildScrollView to make the app style better with zero pixels errors..

5 - I want you to make my app use this loading.json file as loading overlayer with لون شفاف  in background inseted of
 cercular loading and other like it you can make it as statliss wedgit that I can use it anywhere in app with any condetion,
 you can find the file  in  assets\lottie\loading.json

note:  use the files in lottie as we need in project ..





# Flutter Ride-Hailing App Improvements Prompt

## 1. Replace Fluttertoast with Modern Notification System

**Current Issue:** App uses basic Fluttertoast which doesn't display app icon with notifications.

**Solution Required:**
Replace all instances of `Fluttertoast.showToast()` with a modern notification system that includes:

- App icon display
- Different notification types (success, error, info, warning)
- Better visual design with animations
- Support for dark/light themes

**Implementation Approach:**
```dart
// Replace this pattern throughout the app:
Fluttertoast.showToast(msg: "message");

// With a custom notification widget like:
CustomNotification.show(
  context: context,
  type: NotificationType.success, // or error, info, warning
  message: "Your message here",
  icon: "assets/app_icon.png"
);
```

**Files to Update:**
- `lib/api_code/signup_controller.dart`
- `lib/app_screen/map_screen.dart`
- All other files containing `Fluttertoast.showToast()`

---

## 2. Fix Automatic Ride Booking Logic

**Current Issue:**
When the "Automatically book the nearest driver" switch is ON, ride requests work fine. However, when it's OFF and drivers respond with custom prices, the accept/reject functionality for custom price responses is broken.

**Key Components to Fix:**

### A. Switch Logic (`biddautostatus` variable)
```dart
// In MapScreen - ensure proper switch handling
String biddautostatus = "false";
bool switchValue = false;

// When switch is ON (automatic booking)
if (switchValue) {
  biddautostatus = "true";
  // Auto-accept nearest driver logic
}

// When switch is OFF (manual selection with bidding)
if (!switchValue) {
  biddautostatus = "false";
  // Show driver bidding/custom price responses
}
```

### B. Driver Response Handling
**Socket Events to Review:**
- `Vehicle_Bidding$userid` - handles driver bid responses
- `acceptvehrequest$useridgloable` - handles automatic acceptance
- `Accept_Bidding` and `Bidding_decline` - handle manual accept/reject

**Files to Fix:**
- `lib/app_screen/map_screen.dart` (main socket handling)
- `lib/app_screen/driver_list_screen.dart` (accept/reject buttons)

### C. Missing Logic for Custom Price Responses
The issue appears to be in the flow after a driver responds with a custom price when automatic booking is OFF. The accept/reject responses aren't properly handled.

---

## 3. Optimize MapScreen Loading Performance

**Current Issues:**
- Heavy initialization in `initState()`
- Multiple API calls loading simultaneously
- Complex marker loading affecting UI responsiveness

**Performance Optimizations Required:**

### A. Lazy Loading Implementation
```dart
// Instead of loading everything in initState()
@override
void initState() {
  super.initState();
  _initializeEssentials(); // Only critical components

  // Defer heavy operations
  WidgetsBinding.instance.addPostFrameCallback((_) {
    _loadHeavyComponents();
  });
}

Future<void> _initializeEssentials() async {
  // Only essential, fast-loading components
  await _loadUserData();
  await _setupSocket();
}

Future<void> _loadHeavyComponents() async {
  // Heavy operations with loading states
  await _loadMapMarkers();
  await _loadVehicleData();
  await _setupMapStyles();
}
```

### B. Optimize Marker Loading
```dart
// Current inefficient marker loading
// Replace with batched/optimized loading:
Future<void> _loadMarkersOptimized() async {
  // Load markers in batches
  // Use image caching
  // Implement marker pooling
}
```

### C. Memory Management
- Properly dispose controllers and timers
- Implement widget recycling for lists
- Use const constructors where possible

**Files to Optimize:**
- `lib/app_screen/map_screen.dart` (main optimization target)
- `lib/app_screen/home_screen.dart`
- `lib/app_screen/driver_detail_screen.dart`

---

## 4. Add SingleChildScrollView for Better UI

**Areas Needing Scroll Views:**
Based on the code analysis, add `SingleChildScrollView` to prevent pixel overflow in:

### A. Profile Screen
```dart
// In profile_screen.dart
body: SingleChildScrollView(
  padding: EdgeInsets.all(16),
  child: Column(
    children: [
      // Profile content
    ],
  ),
)
```

### B. FAQ Screen
```dart
// In faq_screen.dart - already has SingleChildScrollView but may need optimization
```

### C. Notification Screen
```dart
// In notification_screen.dart
body: SingleChildScrollView(
  child: Column(
    children: [
      // Notification list content
    ],
  ),
)
```

### D. Bottom Sheets and Dialogs
- `counter_bottom_sheet.dart`
- Driver selection dialogs
- Payment method selections

---

## 5. Create Custom Lottie Loading Widget

**Requirement:** Replace all `CircularProgressIndicator` instances with `loading.json` Lottie animation with transparent background.

### A. Create Reusable Loading Widget
```dart
// File: lib/common_code/custom_loading_widget.dart
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class CustomLoadingWidget extends StatelessWidget {
  final double? width;
  final double? height;
  final bool showOverlay;
  final Color backgroundColor;

  const CustomLoadingWidget({
    Key? key,
    this.width = 80,
    this.height = 80,
    this.showOverlay = false,
    this.backgroundColor = Colors.transparent,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    Widget loadingWidget = Lottie.asset(
      'assets/lottie/loading.json',
      width: width,
      height: height,
      fit: BoxFit.contain,
    );

    if (showOverlay) {
      return Container(
        color: backgroundColor.withOpacity(0.3), // شفاف background
        child: Center(child: loadingWidget),
      );
    }

    return loadingWidget;
  }
}

// Overlay version for full-screen loading
class CustomLoadingOverlay extends StatelessWidget {
  final Widget child;
  final bool isLoading;

  const CustomLoadingOverlay({
    Key? key,
    required this.child,
    required this.isLoading,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        child,
        if (isLoading)
          Container(
            color: Colors.black.withOpacity(0.3), // لون شفاف
            child: const Center(
              child: CustomLoadingWidget(
                width: 100,
                height: 100,
              ),
            ),
          ),
      ],
    );
  }
}
```

### B. Replace All Loading Indicators
**Files to Update:**
- `lib/app_screen/map_screen.dart`
- `lib/app_screen/profile_screen.dart`
- `lib/app_screen/faq_screen.dart`
- `lib/app_screen/home_screen.dart`
- `lib/common_code/common_flow_screen.dart`

**Replacement Pattern:**
```dart
// Replace this:
Center(child: CircularProgressIndicator(color: theamcolore))

// With this:
const Center(child: CustomLoadingWidget())

// For overlay loading:
CustomLoadingOverlay(
  isLoading: isLoading,
  child: YourMainWidget(),
)
```

---

## 6. Utilize Additional Lottie Files

**Available Lottie Files in Project:**
- `assets/lottie/loading.json` - Main loading animation
- `assets/lottie/searching.json` - Driver search animation
- `assets/lottie/payment_success.json` - Success animations
- `assets/lottie/payment_processing.json` - Payment loading
- `assets/lottie/warning.json` - Warning/error states
- `assets/lottie/1st.json`, `2nd.json`, `3rd.json` - Onboarding animations

**Usage Recommendations:**
- Use `searching.json` during driver search
- Use `payment_processing.json` during payment operations
- Use `payment_success.json` for successful transactions
- Use `warning.json` for error states and warnings

---

## Implementation Priority

1. **High Priority:** Fix automatic booking logic (#2)
2. **High Priority:** Optimize MapScreen performance (#3)
3. **Medium Priority:** Replace Fluttertoast (#1)
4. **Medium Priority:** Implement custom loading widget (#5)
5. **Low Priority:** Add scroll views (#4)

---

## Testing Recommendations

After implementing these changes:

1. Test automatic vs manual booking flows thoroughly
2. Test MapScreen performance on low-end devices
3. Verify all loading states work properly
4. Test scroll behavior on different screen sizes
5. Verify notification system works across the app

---

## Code Quality Improvements

- Add proper error handling for all async operations
- Implement proper disposal patterns for controllers/timers
- Use const constructors where possible
- Add comprehensive logging for debugging
- Implement proper state management patterns